1,20d0
< !***********************************************************************
< !*                   GNU Lesser General Public License
< !*
< !* This file is part of the FV3 dynamical core.
< !*
< !* The FV3 dynamical core is free software: you can redistribute it
< !* and/or modify it under the terms of the
< !* GNU Lesser General Public License as published by the
< !* Free Software Foundation, either version 3 of the License, or
< !* (at your option) any later version.
< !*
< !* The FV3 dynamical core is distributed in the hope that it will be
< !* useful, but WITHOUT ANYWARRANTY; without even the implied warranty
< !* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
< !* See the GNU General Public License for more details.
< !*
< !* You should have received a copy of the GNU Lesser General Public
< !* License along with the FV3 dynamical core.
< !* If not, see <http://www.gnu.org/licenses/>.
< !***********************************************************************
31c11
< use diag_manager_mod,   only: register_diag_field, &
---
> use diag_manager_mod,   only: register_diag_field, diag_axis_init, &
39c19
< use constants_mod,      only: GRAV
---
> use constants_mod,      only: GRAV, RDGAS
44,45c24,25
<                               get_height_given_pressure, &
<                               rh_calc, get_height_field
---
>                               get_height_given_pressure, rh_calc, &
>                               get_height_field, get_vorticity
61c41
< integer :: sphum
---
> integer :: sphum, nql, nqi, nqa
74c54,55
<                            ID_uwap, ID_vwap, ID_twap
---
>                            ID_uwap, ID_vwap, ID_twap, ID_wa, &
>                            ID_cls, ID_clws, ID_clis
79a61
> integer              :: id_rv200, id_rv500, id_rv850, id_vortmean
109a92
> integer               :: id_pl700, id_pl700_bnds, id_nv
153a137,139
>   nql   = get_tracer_index (MODEL_ATMOS, 'liq_wat')
>   nqi   = get_tracer_index (MODEL_ATMOS, 'ice_wat')
>   nqa   = get_tracer_index (MODEL_ATMOS, 'cld_amt')
175a162,164
>     ID_wa = register_cmip_diag_field_3d (mod_name, 'wa', Time, &
>                        'Upward Air Velocity', 'm s-1', standard_name='upward_air_velocity')
> 
218a208,226
> ! stratiform cloud tracers
> 
>     if (nql > 0) then
>       ID_clws = register_cmip_diag_field_3d (mod_name, 'clws', Time, &
>                         'Mass Fraction of Stratiform Cloud Liquid Water', '1.0', &
>                  standard_name='mass_fraction_of_stratiform_cloud_liquid_water_in_air')
>     endif
>     if (nqi > 0) then
>       ID_clis = register_cmip_diag_field_3d (mod_name, 'clis', Time, &
>                         'Mass Fraction of Stratiform Cloud Ice', '1.0', &
>                  standard_name='mass_fraction_of_convective_cloud_ice_in_air')
>     endif
>     if (nqa > 0) then
>       ID_cls = register_cmip_diag_field_3d (mod_name, 'cls', Time, &
>                         'Percentage Cover of Stratiform Cloud', '%', &
>                  standard_name='stratiform_cloud_area_fraction_in_atmosphere_layer')
>     endif
> 
> !-----------------------------------------------------------------------
235c243
<                                     area=area_id)
---
>                                     area=area_id, interp_method='conserve_order1')
242c250
< !                                  area=area_id)
---
> !                                  area=area_id, interp_method='conserve_order1')
261a270,286
>     id_pl700 = register_static_field (mod_name, 'pl700', (/null_axis_id/), &
>                         '700 hPa Average', 'Pa', standard_name='air_pressure')
>     if (id_pl700 > 0) then
>       call diag_field_add_attribute (id_pl700, 'axis', 'Z')
>       call diag_field_add_attribute (id_pl700, 'positive', 'down' )
>       call diag_field_add_attribute (id_pl700, 'comment', 'average at levels 600,700,850 hPa' )
>       ! add bounds
>       id_nv = diag_axis_init('nv', (/1.,2./), 'none', 'N', 'vertex number', set_name='nv')
>       id_pl700_bnds = register_static_field (mod_name, 'pl700_bnds', (/id_nv,null_axis_id/), &
>                                      '700 hPa boundaries', 'Pa', standard_name='air_pressure')
>       if (id_pl700_bnds > 0) then
>         call diag_field_add_attribute (id_pl700, 'bounds', 'pl700_bnds' )
>         used = send_data (id_pl700_bnds, (/850.e2,600.e2/), Time)
>       endif
>       used = send_data (id_pl700, 700.e2, Time)
>     endif
> 
313a339,363
>   !---- relative vorticity at 200, 500, 850 hPa ----
> 
>     id_rv200 = register_cmip_diag_field_2d (mod_name, 'rv200', Time, &
>                   'Relative Vorticity at 200 hPa', 's-1', standard_name='atmosphere_relative_vorticity')
>     if (id_rv200 > 0 .and. id_plevels(id_p200) > 0) &
>         call diag_field_add_attribute (id_rv200, 'coordinates', 'p200')
> 
>     id_rv500 = register_cmip_diag_field_2d (mod_name, 'rv500', Time, &
>                   'Relative Vorticity at 500 hPa', 's-1', standard_name='atmosphere_relative_vorticity')
>     if (id_rv500 > 0 .and. id_plevels(id_p500) > 0) &
>         call diag_field_add_attribute (id_rv500, 'coordinates', 'p500')
> 
>     id_rv850 = register_cmip_diag_field_2d (mod_name, 'rv850', Time, &
>                   'Relative Vorticity at 850 hPa', 's-1', standard_name='atmosphere_relative_vorticity')
>     if (id_rv850 > 0 .and. id_plevels(id_p850) > 0) &
>         call diag_field_add_attribute (id_rv850, 'coordinates', 'p850')
> 
>   !---- mean relative vorticity 600, 700, 850 hPa ----
> 
>     id_vortmean = register_cmip_diag_field_2d (mod_name, 'vortmean', Time, &
>                  'Mean Relative Vorticity over 600-850 hPa', 's-1',  &
>                         standard_name='atmosphere_relative_vorticity')
>     if (id_vortmean > 0 .and. id_pl700 > 0) &
>         call diag_field_add_attribute (id_vortmean, 'coordinates', 'pl700')
> 
359a410
> logical :: compute_rh, compute_wa
362c413,414
<                 Atm(1)%bd%jsc:Atm(1)%bd%jec) :: pfull, dat2
---
>                 Atm(1)%bd%jsc:Atm(1)%bd%jec) :: pfull, dat2, &
>                                                 rv850, rv700, rv600
368c420
<                 Atm(1)%npz) :: rhum
---
>                 Atm(1)%npz) :: rhum, wa, rv
386a439,444
>   ! set flags for computing quantities
>   compute_rh = .false.
>   compute_wa = .false.
>   if (count(ID_hur%field_id(:)>0) > 0) compute_rh = .true.
>   if (count(ID_wa%field_id(:)>0)  > 0) compute_wa = .true.
> 
388c446
<   if (count(ID_hur%field_id(:)>0) > 0) then
---
>   if (compute_rh .or. compute_wa) then
395c453,455
<       call rh_calc (pfull, Atm(n)%pt(isc:iec,jsc:jec,k), &
---
>       ! compute relative humidity
>       if (compute_rh) then
>         call rh_calc (pfull, Atm(n)%pt(isc:iec,jsc:jec,k), &
396a457,462
>       endif
>       ! compute vertical velocity
>       if (compute_wa) then
>         wa(isc:iec,jsc:jec,k) = -(Atm(n)%omga(isc:iec,jsc:jec,k)*Atm(n)%pt(isc:iec,jsc:jec,k)/ &
>                                         pfull(isc:iec,jsc:jec))*(RDGAS/GRAV)
>       endif
406a473,478
>   ! relative vorticity
>   if (any((/id_rv200,id_rv500,id_rv850,id_vortmean/) > 0)) then
>     call get_vorticity(isc, iec, jsc, jec, Atm(n)%bd%isd, Atm(n)%bd%ied, Atm(n)%bd%jsd, Atm(n)%bd%jed, npz, &
>                        Atm(n)%u, Atm(n)%v, rv, Atm(n)%gridstruct%dx, Atm(n)%gridstruct%dy, Atm(n)%gridstruct%rarea)
>   endif
> 
433a506,509
>     ! vertical velocity
>   if (query_cmip_diag_id(ID_wa)) &
>           used = send_cmip_data_3d (ID_wa, wa(isc:iec,jsc:jec,:), Time, phalf=Atm(n)%peln, opt=1)
> 
481a558,564
> ! stratiform cloud tracers (only on model levels)
> 
>   if (query_cmip_diag_id(ID_cls))  used = send_cmip_data_3d (ID_cls,  Atm(n)%q(isc:iec,jsc:jec,:,nqa)*100., Time)
>   if (query_cmip_diag_id(ID_clws)) used = send_cmip_data_3d (ID_clws, Atm(n)%q(isc:iec,jsc:jec,:,nql), Time)
>   if (query_cmip_diag_id(ID_clis)) used = send_cmip_data_3d (ID_clis, Atm(n)%q(isc:iec,jsc:jec,:,nqi), Time)
> 
> !----------------------------------------------------------------------
541a625,644
>   endif
> 
>   if (id_rv200 > 0) then
>     call interpolate_vertical (isc, iec, jsc, jec, npz, 200.e2, Atm(n)%peln, rv, dat2)          
>     used = send_data (id_rv200, dat2, Time)
>   endif
> 
>   if (id_rv500 > 0) then
>     call interpolate_vertical (isc, iec, jsc, jec, npz, 500.e2, Atm(n)%peln, rv, dat2)          
>     used = send_data (id_rv500, dat2, Time)
>   endif
> 
>   if (id_rv850 > 0 .or. id_vortmean > 0) then
>     call interpolate_vertical (isc, iec, jsc, jec, npz, 850.e2, Atm(n)%peln, rv, rv850)          
>     if (id_rv850 > 0) used = send_data (id_rv850, rv850, Time)
>     if (id_vortmean > 0) then
>       call interpolate_vertical (isc, iec, jsc, jec, npz, 600.e2, Atm(n)%peln, rv, rv600)
>       call interpolate_vertical (isc, iec, jsc, jec, npz, 700.e2, Atm(n)%peln, rv, rv700)
>       used = send_data (id_vortmean, (rv600+rv700+rv850)/3., Time)
>     endif
