2,19c2,18
< !*                   GNU Lesser General Public License
< !*
< !* This file is part of the FV3 dynamical core.
< !*
< !* The FV3 dynamical core is free software: you can redistribute it
< !* and/or modify it under the terms of the
< !* GNU Lesser General Public License as published by the
< !* Free Software Foundation, either version 3 of the License, or
< !* (at your option) any later version.
< !*
< !* The FV3 dynamical core is distributed in the hope that it will be
< !* useful, but WITHOUT ANYWARRANTY; without even the implied warranty
< !* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
< !* See the GNU General Public License for more details.
< !*
< !* You should have received a copy of the GNU Lesser General Public
< !* License along with the FV3 dynamical core.
< !* If not, see <http://www.gnu.org/licenses/>.
---
> !*                   GNU General Public License                        *
> !* This file is a part of fvGFS.                                       *
> !*                                                                     *
> !* fvGFS is free software; you can redistribute it and/or modify it    *
> !* and are expected to follow the terms of the GNU General Public      *
> !* License as published by the Free Software Foundation; either        *
> !* version 2 of the License, or (at your option) any later version.    *
> !*                                                                     *
> !* fvGFS is distributed in the hope that it will be useful, but        *
> !* WITHOUT ANY WARRANTY; without even the implied warranty of          *
> !* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU   *
> !* General Public License for more details.                            *
> !*                                                                     *
> !* For the full text of the GNU General Public License,                *
> !* write to: Free Software Foundation, Inc.,                           *
> !*           675 Mass Ave, Cambridge, MA 02139, USA.                   *
> !* or see:   http://www.gnu.org/licenses/gpl.html                      *
30c29,30
<                                register_static_field, send_data, diag_grid_init
---
>                                register_static_field, send_data, diag_grid_init, &
>                                diag_field_add_attribute
81c81
<  public :: get_height_given_pressure, interpolate_vertical, rh_calc, get_height_field, get_vorticity !:MKL December 27 2019
---
>  public :: get_height_given_pressure, interpolate_vertical, rh_calc, get_height_field, get_vorticity
152c152
<     vrange = (/ -330.,  330. /)  ! winds
---
>     vrange = (/ -300.,  300. /)  ! winds
158c158
<     trange = (/  100.,  350. /)  ! temperature
---
>     trange = (/  100.,  400. /)  ! temperature
291a292,294
>        if (id_area > 0) then
>          call diag_field_add_attribute (id_area, 'cell_methods', 'area: sum')
>        endif
294c297
<                                          'surface height', 'm' )
---
>                                          'surface height', 'm', interp_method='conserve_order1' )
425c428
<                                        'surface height', 'm')
---
>                                        'surface height', 'm', interp_method='conserve_order1')
431c434
<             'surface pressure', 'Pa', missing_value=missing_value )
---
>             'surface pressure', 'Pa', missing_value=missing_value, range=(/40000.0, 110000.0/))
487,488c490,492
<            all(idiag%id_h(minloc(abs(levs-850)))>0) .or. all(idiag%id_h(minloc(abs(levs-1000)))>0) ) then
<            idiag%id_hght = 1
---
>            all(idiag%id_h(minloc(abs(levs-850)))>0) .or. all(idiag%id_h(minloc(abs(levs-925)))>0) .or. &
>            all(idiag%id_h(minloc(abs(levs-1000)))>0) ) then
>         idiag%id_hght = 1
490c494
<            idiag%id_hght = 0
---
>         idiag%id_hght = 0
496c500
<                                    'mean 300-500 mb temp', 'K', missing_value=missing_value )
---
>                                    'mean 300-500 mb temp', 'K', missing_value=missing_value, range=(/140.0,400.0/) )
583a588,654
> 
> !--------------------
> ! 3D flux terms
> !--------------------
>        idiag%id_uq = register_diag_field ( trim(field), 'uq', axes(1:3), Time,        &
>             'zonal moisture flux', 'Kg/Kg*m/sec', missing_value=missing_value )
>        idiag%id_vq = register_diag_field ( trim(field), 'vq', axes(1:3), Time,        &
>             'meridional moisture flux', 'Kg/Kg*m/sec', missing_value=missing_value ) 
> 
>        idiag%id_ut = register_diag_field ( trim(field), 'ut', axes(1:3), Time,        &
>             'zonal heat flux', 'K*m/sec', missing_value=missing_value )
>        idiag%id_vt = register_diag_field ( trim(field), 'vt', axes(1:3), Time,        &
>             'meridional heat flux', 'K*m/sec', missing_value=missing_value )
> 
>        idiag%id_uu = register_diag_field ( trim(field), 'uu', axes(1:3), Time,        &
>             'zonal flux of zonal wind', '(m/sec)^2', missing_value=missing_value )
>        idiag%id_uv = register_diag_field ( trim(field), 'uv', axes(1:3), Time,        &
>             'zonal flux of meridional wind', '(m/sec)^2', missing_value=missing_value )
>        idiag%id_vv = register_diag_field ( trim(field), 'vv', axes(1:3), Time,        &
>             'meridional flux of meridional wind', '(m/sec)^2', missing_value=missing_value )
> 
>        if(.not.Atm(n)%flagstruct%hydrostatic) then
>        idiag%id_wq = register_diag_field ( trim(field), 'wq', axes(1:3), Time,        &
>             'vertical moisture flux', 'Kg/Kg*m/sec', missing_value=missing_value )
>        idiag%id_wt = register_diag_field ( trim(field), 'wt', axes(1:3), Time,        &
>             'vertical heat flux', 'K*m/sec', missing_value=missing_value )
>        idiag%id_uw = register_diag_field ( trim(field), 'uw', axes(1:3), Time,        &
>             'zonal flux of vertical wind', '(m/sec)^2', missing_value=missing_value )
>        idiag%id_vw = register_diag_field ( trim(field), 'vw', axes(1:3), Time,        &
>             'meridional flux of vertical wind', '(m/sec)^2', missing_value=missing_value )
>        idiag%id_ww = register_diag_field ( trim(field), 'ww', axes(1:3), Time,        &
>             'vertical flux of vertical wind', '(m/sec)^2', missing_value=missing_value )
>        endif
> 
> !--------------------
> ! vertical integral of 3D flux terms
> !--------------------
>        idiag%id_iuq = register_diag_field ( trim(field), 'uq_vi', axes(1:2), Time,        &
>             'vertical integral of uq', 'Kg/Kg*m/sec*Pa', missing_value=missing_value )
>        idiag%id_ivq = register_diag_field ( trim(field), 'vq_vi', axes(1:2), Time,        &
>             'vertical integral of vq', 'Kg/Kg*m/sec*Pa', missing_value=missing_value )
> 
>        idiag%id_iut = register_diag_field ( trim(field), 'ut_vi', axes(1:2), Time,        &
>             'vertical integral of ut', 'K*m/sec*Pa', missing_value=missing_value )
>        idiag%id_ivt = register_diag_field ( trim(field), 'vt_vi', axes(1:2), Time,        &
>             'vertical integral of vt', 'K*m/sec*Pa', missing_value=missing_value )
> 
>        idiag%id_iuu = register_diag_field ( trim(field), 'uu_vi', axes(1:2), Time,        &
>             'vertical integral of uu', '(m/sec)^2*Pa', missing_value=missing_value )
>        idiag%id_iuv = register_diag_field ( trim(field), 'uv_vi', axes(1:2), Time,        &
>             'vertical integral of uv', '(m/sec)^2*Pa', missing_value=missing_value )
>        idiag%id_ivv = register_diag_field ( trim(field), 'vv_vi', axes(1:2), Time,        &
>             'vertical integral of vv', '(m/sec)^2*Pa', missing_value=missing_value )
> 
>        if(.not.Atm(n)%flagstruct%hydrostatic) then
>        idiag%id_iwq = register_diag_field ( trim(field), 'wq_vi', axes(1:2), Time,        &
>             'vertical integral of wq', 'Kg/Kg*m/sec*Pa', missing_value=missing_value )
>        idiag%id_iwt = register_diag_field ( trim(field), 'wt_vi', axes(1:2), Time,        &
>             'vertical integral of wt', 'K*m/sec*Pa', missing_value=missing_value )
>        idiag%id_iuw = register_diag_field ( trim(field), 'uw_vi', axes(1:2), Time,        &
>             'vertical integral of uw', '(m/sec)^2*Pa', missing_value=missing_value )
>        idiag%id_ivw = register_diag_field ( trim(field), 'vw_vi', axes(1:2), Time,        &
>             'vertical integral of vw', '(m/sec)^2*Pa', missing_value=missing_value )
>        idiag%id_iww = register_diag_field ( trim(field), 'ww_vi', axes(1:2), Time,        &
>             'vertical integral of ww', '(m/sec)^2*Pa', missing_value=missing_value )
>        endif
> 
653c724
<                            '850-mb vorticity', '1/s', missing_value=missing_value )
---
>                            '850-mb vorticity', '1/s', missing_value=missing_value)
661a733,738
> !--------------------------
> ! 200-mb winds:
> !--------------------------
>        idiag%id_w200 = register_diag_field ( trim(field), 'w200', axes(1:2), Time,     &
>                            '200-mb w-wind', '1/s', missing_value=missing_value )
> ! s200: wind speed for computing KE spectrum
701a779,783
> !--------------------------
> ! 850-mb winds:
> !--------------------------
>        idiag%id_w850 = register_diag_field ( trim(field), 'w850', axes(1:2), Time,       &
>                            '850-mb w-wind', '1/s', missing_value=missing_value )
926c1008
<     real, allocatable :: a2(:,:),a3(:,:,:), wk(:,:,:), wz(:,:,:), ucoor(:,:,:), vcoor(:,:,:)
---
>     real, allocatable :: a2(:,:),a3(:,:,:), a4(:,:,:), wk(:,:,:), wz(:,:,:), ucoor(:,:,:), vcoor(:,:,:)
2195,2196c2277
<        if ( idiag%id_u100m>0 .or. idiag%id_v100m>0 .or. idiag%id_w100m>0 .or. idiag%id_w5km>0 .or. idiag%id_w2500m>0 &
<             & .or. idiag%id_basedbz>0 .or. idiag%id_dbz4km>0) then
---
>        if ( idiag%id_u100m>0 .or. idiag%id_v100m>0 .or. idiag%id_w100m>0 .or. idiag%id_w5km>0 .or. idiag%id_w2500m>0 .or. idiag%id_basedbz .ne. 0 .or. idiag%id_dbz4km .ne. 0 ) then !! idiag%id_basedbz and idiag%id_dbz4km are INTEGERS 
2235a2317,2322
>        if ( idiag%id_w200>0 ) then
>             call interpolate_vertical(isc, iec, jsc, jec, npz,   &
>                                       200.e2, Atm(n)%peln, Atm(n)%w(isc:iec,jsc:jec,:), a2)
>             used=send_data(idiag%id_w200, a2, Time)
>        endif
> ! 250-mb
2262c2349
<        if ( rainwat > 0 .and. (idiag%id_dbz>0 .or. idiag%id_maxdbz>0 .or. idiag%id_basedbz>0 .or. idiag%id_dbz4km>0)) then
---
>        if ( rainwat > 0 .and. (idiag%id_dbz>0 .or. idiag%id_maxdbz>0 .or. idiag%id_basedbz>0 .or. idiag%id_dbz4km .ne. 0 )) then
2406a2494,2498
>        if ( idiag%id_x850>0 .and. idiag%id_vort850>0 ) then
>          x850(:,:) = x850(:,:)*a2(:,:) 
>          used=send_data(idiag%id_x850, x850, Time)
>          deallocate ( x850 )
>        endif
2476c2568
<           call eqv_pot(a3, Atm(n)%pt, Atm(n)%delp, Atm(n)%delz, Atm(n)%peln, Atm(n)%pkz, (/Atm(n)%q(isd,jsd,1,sphum)/),&
---
>           call eqv_pot(a3, Atm(n)%pt, Atm(n)%delp, Atm(n)%delz, Atm(n)%peln, Atm(n)%pkz, (/Atm(n)%q(isd,jsd,1,sphum)/),    &
2578a2671,2782
> !----------------------------------
> ! compute 3D flux terms
> !----------------------------------
>      allocate ( a4(isc:iec,jsc:jec,npz) )
> 
>      ! zonal moisture flux
>      if(idiag%id_uq > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%ua(i,j,k) * Atm(n)%q(i,j,k,sphum)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_uq, a4, Time)
>        if(idiag%id_iuq > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_iuq, a2, Time)
>        endif
>      endif
>     ! meridional moisture flux
>      if(idiag%id_vq > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%va(i,j,k) * Atm(n)%q(i,j,k,sphum)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_vq, a4, Time)
>        if(idiag%id_ivq > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_ivq, a2, Time)
>        endif
>      endif
> 
>      ! zonal heat flux
>      if(idiag%id_ut > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%ua(i,j,k) * Atm(n)%pt(i,j,k)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_ut, a4, Time)
>        if(idiag%id_iut > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_iut, a2, Time)
>        endif
>      endif
>      ! meridional heat flux
>      if(idiag%id_vt > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%va(i,j,k) * Atm(n)%pt(i,j,k)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_vt, a4, Time)
>        if(idiag%id_ivt > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_ivt, a2, Time)
>        endif
>      endif
> 
>      ! zonal flux of u
>      if(idiag%id_uu > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%ua(i,j,k) * Atm(n)%ua(i,j,k)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_uu, a4, Time)
>        if(idiag%id_iuu > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_iuu, a2, Time)
>        endif
>      endif
>      ! zonal flux of v
>      if(idiag%id_uv > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%ua(i,j,k) * Atm(n)%va(i,j,k)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_uv, a4, Time)
>        if(idiag%id_iuv > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_iuv, a2, Time)
>        endif
>      endif
>     ! meridional flux of v
>      if(idiag%id_vv > 0) then
>        do k=1,npz
>           do j=jsc,jec
>              do i=isc,iec
>                 a4(i,j,k) =  Atm(n)%va(i,j,k) * Atm(n)%va(i,j,k)
>              enddo
>           enddo
>        enddo
>        used=send_data(idiag%id_vv, a4, Time)
>        if(idiag%id_ivv > 0) then
>          call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>          used=send_data(idiag%id_ivv, a2, Time)
>        endif
>      endif
2579a2784,2861
> ! terms related with vertical wind ( Atm(n)%w ):
>      if(.not.Atm(n)%flagstruct%hydrostatic) then
>        ! vertical moisture flux
>        if(idiag%id_wq > 0) then
>          do k=1,npz
>             do j=jsc,jec
>                do i=isc,iec
>                   a4(i,j,k) =  Atm(n)%w(i,j,k) * Atm(n)%q(i,j,k,sphum)
>                enddo
>             enddo
>          enddo
>          used=send_data(idiag%id_wq, a4, Time)
>          if(idiag%id_iwq > 0) then
>            call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>            used=send_data(idiag%id_iwq, a2, Time)
>          endif
>        endif
>        ! vertical heat flux
>        if(idiag%id_wt > 0) then
>          do k=1,npz
>             do j=jsc,jec
>                do i=isc,iec
>                   a4(i,j,k) =  Atm(n)%w(i,j,k) * Atm(n)%pt(i,j,k)
>                enddo
>             enddo
>          enddo
>          used=send_data(idiag%id_wt, a4, Time)
>          if(idiag%id_iwt > 0) then
>            call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>            used=send_data(idiag%id_iwt, a2, Time)
>          endif
>        endif
>       ! zonal flux of w
>        if(idiag%id_uw > 0) then
>          do k=1,npz
>             do j=jsc,jec
>                do i=isc,iec
>                   a4(i,j,k) =  Atm(n)%ua(i,j,k) * Atm(n)%w(i,j,k)
>                enddo
>             enddo
>          enddo
>          used=send_data(idiag%id_uw, a4, Time)
>          if(idiag%id_iuw > 0) then
>            call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>            used=send_data(idiag%id_iuw, a2, Time)
>          endif
>        endif
>        ! meridional flux of w
>        if(idiag%id_vw > 0) then
>          do k=1,npz
>             do j=jsc,jec
>                do i=isc,iec
>                   a4(i,j,k) =  Atm(n)%va(i,j,k) * Atm(n)%w(i,j,k)
>                enddo
>             enddo
>          enddo
>          used=send_data(idiag%id_vw, a4, Time)
>          if(idiag%id_ivw > 0) then
>            call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>            used=send_data(idiag%id_ivw, a2, Time)
>          endif
>        endif
>        ! vertical flux of w
>        if(idiag%id_ww > 0) then
>          do k=1,npz
>             do j=jsc,jec
>                do i=isc,iec
>                   a4(i,j,k) =  Atm(n)%w(i,j,k) * Atm(n)%w(i,j,k)
>                enddo
>             enddo
>          enddo
>          used=send_data(idiag%id_ww, a4, Time)
>          if(idiag%id_iww > 0) then
>            call z_sum(isc, iec, jsc, jec, npz, 0, Atm(n)%delp(isc:iec,jsc:jec,1:npz), a4, a2)
>            used=send_data(idiag%id_iww, a2, Time)
>          endif
>        endif
>      endif
2580a2863
>      deallocate ( a4 )
